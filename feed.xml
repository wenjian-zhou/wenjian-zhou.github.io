<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://wenjian-zhou.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://wenjian-zhou.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-02T05:04:13+00:00</updated><id>https://wenjian-zhou.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Ease Your Graphics Development</title><link href="https://wenjian-zhou.github.io/blog/2025/ease-graphics-development/" rel="alternate" type="text/html" title="Ease Your Graphics Development"/><published>2025-07-15T17:00:00+00:00</published><updated>2025-07-15T17:00:00+00:00</updated><id>https://wenjian-zhou.github.io/blog/2025/ease-graphics-development</id><content type="html" xml:base="https://wenjian-zhou.github.io/blog/2025/ease-graphics-development/"><![CDATA[<p>This blog post serves as a collection of basic graphics algorithms, like ray-triangle intersections, ray-sphere intersections…etc. This idea came to my mind while I was reading <a href="https://github.com/microsoft/DirectX-Graphics-Samples">DirectX Raytracing Samples</a>, I am too lazy to remember those algorithms so I think I’ll just put a collection here so I don’t need to google every one of them every time.</p> <h2 id="ray-triangle-intersection">Ray-triangle intersection</h2> <p>C++ example from <a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/moller-trumbore-ray-triangle-intersection.html">here</a>, using Möller-Trumbore algorithm:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">rayTriangleIntersect</span><span class="p">(</span>
    <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">orig</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">dir</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">v0</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">v2</span><span class="p">,</span>
    <span class="kt">float</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
<span class="cp">#ifdef MOLLER_TRUMBORE
</span>    <span class="n">Vec3f</span> <span class="n">v0v1</span> <span class="o">=</span> <span class="n">v1</span> <span class="o">-</span> <span class="n">v0</span><span class="p">;</span>
    <span class="n">Vec3f</span> <span class="n">v0v2</span> <span class="o">=</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">v0</span><span class="p">;</span>
    <span class="n">Vec3f</span> <span class="n">pvec</span> <span class="o">=</span> <span class="n">dir</span><span class="p">.</span><span class="n">crossProduct</span><span class="p">(</span><span class="n">v0v2</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">det</span> <span class="o">=</span> <span class="n">v0v1</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">pvec</span><span class="p">);</span>
<span class="cp">#ifdef CULLING
</span>    <span class="c1">// If the determinant is negative, the triangle is back-facing.</span>
    <span class="c1">// If the determinant is close to 0, the ray misses the triangle.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">det</span> <span class="o">&lt;</span> <span class="n">kEpsilon</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="cp">#else
</span>    <span class="c1">// If det is close to 0, the ray and triangle are parallel.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">det</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">kEpsilon</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="cp">#endif
</span>    <span class="kt">float</span> <span class="n">invDet</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">det</span><span class="p">;</span>

    <span class="n">Vec3f</span> <span class="n">tvec</span> <span class="o">=</span> <span class="n">orig</span> <span class="o">-</span> <span class="n">v0</span><span class="p">;</span>
    <span class="n">u</span> <span class="o">=</span> <span class="n">tvec</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">pvec</span><span class="p">)</span> <span class="o">*</span> <span class="n">invDet</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">u</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">u</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

    <span class="n">Vec3f</span> <span class="n">qvec</span> <span class="o">=</span> <span class="n">tvec</span><span class="p">.</span><span class="n">crossProduct</span><span class="p">(</span><span class="n">v0v1</span><span class="p">);</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">dir</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">qvec</span><span class="p">)</span> <span class="o">*</span> <span class="n">invDet</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">u</span> <span class="o">+</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    
    <span class="n">t</span> <span class="o">=</span> <span class="n">v0v2</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">qvec</span><span class="p">)</span> <span class="o">*</span> <span class="n">invDet</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="cp">#else
</span>    <span class="p">...</span>
<span class="cp">#endif
</span><span class="p">}</span>
</code></pre></div></div> <h2 id="distance-functions">Distance functions</h2> <p><a href="https://iquilezles.org/articles/distfunctions/">Link</a></p> <h2 id="ray-sphere-intersection">Ray-sphere intersection</h2> <p>C++ example from <a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection.html">here</a>, where there’s an auxiliary function <code class="language-plaintext highlighter-rouge">solveQuadratic()</code></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">solveQuadratic</span><span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> 
					<span class="kt">float</span> <span class="o">&amp;</span><span class="n">x0</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">x1</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">float</span> <span class="n">discr</span> <span class="o">=</span> <span class="n">b</span> <span class="o">*</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">a</span> <span class="o">*</span> <span class="n">c</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">discr</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">discr</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">x0</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">b</span> <span class="o">/</span> <span class="n">a</span><span class="p">;</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="kt">float</span> <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span>
            <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">discr</span><span class="p">))</span> <span class="o">:</span>
            <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span> <span class="o">-</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">discr</span><span class="p">));</span>
        <span class="n">x0</span> <span class="o">=</span> <span class="n">q</span> <span class="o">/</span> <span class="n">a</span><span class="p">;</span>
        <span class="n">x1</span> <span class="o">=</span> <span class="n">c</span> <span class="o">/</span> <span class="n">q</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x0</span> <span class="o">&gt;</span> <span class="n">x1</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">x0</span><span class="p">,</span> <span class="n">x1</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">intersect</span><span class="p">(</span><span class="k">const</span> <span class="n">Ray</span> <span class="o">&amp;</span><span class="n">ray</span><span class="p">)</span> <span class="k">const</span>
<span class="p">{</span>
        <span class="kt">float</span> <span class="n">t0</span><span class="p">,</span> <span class="n">t1</span><span class="p">;</span> <span class="c1">// Solutions for t if the ray intersects the sphere</span>
<span class="c">#if 0
        // Geometric solution
        Vec3f L = center - ray.orig;
        float tca = L.dotProduct(ray.dir);
        // if (tca &lt; 0) return false;
        float d2 = L.dotProduct(L) - tca * tca;
        if (d2 &gt; radius * radius) return false;
        float thc = sqrt(radius * radius - d2);
        t0 = tca - thc;
        t1 = tca + thc;
#else</span>
        <span class="c1">// Analytic solution</span>
        <span class="n">Vec3f</span> <span class="n">L</span> <span class="o">=</span> <span class="n">ray</span><span class="p">.</span><span class="n">orig</span> <span class="o">-</span> <span class="n">center</span><span class="p">;</span>
        <span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="n">ray</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">ray</span><span class="p">.</span><span class="n">dir</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">ray</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">c</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="o">-</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">radius</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">solveQuadratic</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">t0</span><span class="p">,</span> <span class="n">t1</span><span class="p">))</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="cp">#endif
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">t0</span> <span class="o">&gt;</span> <span class="n">t1</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span> <span class="n">t1</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">t0</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">t0</span> <span class="o">=</span> <span class="n">t1</span><span class="p">;</span> <span class="c1">// If t0 is negative, let's use t1 instead.</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">t0</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// Both t0 and t1 are negative.</span>
        <span class="p">}</span>

        <span class="n">t</span> <span class="o">=</span> <span class="n">t0</span><span class="p">;</span>

        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="ray-box-intersection">Ray-box intersection</h2> <p>C++ example from <a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection.html">here</a>:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Ray</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Ray</span><span class="p">(</span><span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">orig</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">dir</span><span class="p">)</span> <span class="o">:</span> <span class="n">orig</span><span class="p">(</span><span class="n">orig</span><span class="p">),</span> <span class="n">dir</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">invdir</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">dir</span><span class="p">;</span>
        <span class="n">sign</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">invdir</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">sign</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">invdir</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">sign</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">invdir</span><span class="p">.</span><span class="n">z</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">Vec3</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">orig</span><span class="p">,</span> <span class="n">dir</span><span class="p">;</span>       <span class="c1">// Ray origin and direction</span>
    <span class="n">Vec3</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">invdir</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sign</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="p">};</span>
 
<span class="kt">bool</span> <span class="n">intersect</span><span class="p">(</span><span class="k">const</span> <span class="n">Ray</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">)</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">tmin</span><span class="p">,</span> <span class="n">tmax</span><span class="p">,</span> <span class="n">tymin</span><span class="p">,</span> <span class="n">tymax</span><span class="p">,</span> <span class="n">tzmin</span><span class="p">,</span> <span class="n">tzmax</span><span class="p">;</span>
    
    <span class="n">tmin</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="n">x</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
    <span class="n">tmax</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="n">x</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
    <span class="n">tymin</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="n">y</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
    <span class="n">tymax</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="n">y</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">((</span><span class="n">tmin</span> <span class="o">&gt;</span> <span class="n">tymax</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">tymin</span> <span class="o">&gt;</span> <span class="n">tmax</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">tymin</span> <span class="o">&gt;</span> <span class="n">tmin</span><span class="p">)</span>
        <span class="n">tmin</span> <span class="o">=</span> <span class="n">tymin</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">tymax</span> <span class="o">&lt;</span> <span class="n">tmax</span><span class="p">)</span>
        <span class="n">tmax</span> <span class="o">=</span> <span class="n">tymax</span><span class="p">;</span>
    
    <span class="n">tzmin</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="n">z</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">z</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">z</span><span class="p">;</span>
    <span class="n">tzmax</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="n">z</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">z</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">z</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">((</span><span class="n">tmin</span> <span class="o">&gt;</span> <span class="n">tzmax</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">tzmin</span> <span class="o">&gt;</span> <span class="n">tmax</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">tzmin</span> <span class="o">&gt;</span> <span class="n">tmin</span><span class="p">)</span>
        <span class="n">tmin</span> <span class="o">=</span> <span class="n">tzmin</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">tzmax</span> <span class="o">&lt;</span> <span class="n">tmax</span><span class="p">)</span>
        <span class="n">tmax</span> <span class="o">=</span> <span class="n">tzmax</span><span class="p">;</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="BlogPosts"/><category term="graphics"/><summary type="html"><![CDATA[Some useful links to ease your graphics development.]]></summary></entry></feed>