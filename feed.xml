<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://wenjian-zhou.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://wenjian-zhou.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-09T02:08:45+00:00</updated><id>https://wenjian-zhou.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Learning DXR</title><link href="https://wenjian-zhou.github.io/blog/2025/learning-dxr/" rel="alternate" type="text/html" title="Learning DXR"/><published>2025-07-07T16:30:00+00:00</published><updated>2025-07-07T16:30:00+00:00</updated><id>https://wenjian-zhou.github.io/blog/2025/learning-dxr</id><content type="html" xml:base="https://wenjian-zhou.github.io/blog/2025/learning-dxr/"><![CDATA[<h1 id="initialting-raytracing">Initialting raytracing</h1> <ol> <li>Set pipline state containing raytracing shaders using <code class="language-plaintext highlighter-rouge">SetPipelineState()</code>.</li> <li>Invoke raytracing by <code class="language-plaintext highlighter-rouge">DispatchRays()</code> just like rasterization and compute are invoked by <code class="language-plaintext highlighter-rouge">Draw()</code> and <code class="language-plaintext highlighter-rouge">Dispatch()</code>.</li> <li>Tier 1.1: <ul> <li>adds support for GPU initiated <code class="language-plaintext highlighter-rouge">DispatchRays()</code> via <code class="language-plaintext highlighter-rouge">ExecuteIndirect()</code>.</li> <li>adds support for a variant of raytracing that can be invoked from any shader stage(<span style="color:red"><em>What???</em></span>).</li> </ul> </li> </ol> <h1 id="ray-generation-shaders">Ray generation shaders</h1> <p><code class="language-plaintext highlighter-rouge">DispatchRays()</code> invokes threads of ray generation shaders, and each of them knows it’s location in the “grid”, and can generate rays via <code class="language-plaintext highlighter-rouge">TraceRay()</code>.</p> <h1 id="rays">Rays</h1> <p>Which includes: origin, direction, and parametric interval <code class="language-plaintext highlighter-rouge">(TMin, TMax)</code>, positions along the ray is <code class="language-plaintext highlighter-rouge">origin + T * direction</code>.</p> <p>A ray is visible to the <em>caller</em> of <code class="language-plaintext highlighter-rouge">TraceRay()</code>, it comes with a user defined payload that is modifiable as the ray interacts with geometry in a scene(<span style="color:red"><em>What???</em></span>)</p> <p><code class="language-plaintext highlighter-rouge">TMin</code> never changes over the lifetime of a ray, the system reduces <code class="language-plaintext highlighter-rouge">TMax</code> to reflect the closest intersection.</p> <h1 id="raytracing-output">Raytracing output</h1> <p>Shaders output results such as color samples for an image, manually through UAVs.</p> <h1 id="ray-geometry-interaction-diagram">Ray-geometry interaction diagram</h1> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/rayGeometryInteraction-480.webp 480w,/assets/img/rayGeometryInteraction-800.webp 800w,/assets/img/rayGeometryInteraction-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/rayGeometryInteraction.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h1 id="geometry-and-acceleration-structures">Geometry and acceleration structures</h1> <p>Geometry in a scene is described as a system using two levels of acceleration structures: <strong>Bottom-level acceleration structures(B-LAS)</strong> consist of a set of geometries that are building blocks for a scene, while <strong>Top-level acceleration structures(T-LAS)</strong> represents a set of instances of B-LAS structures.</p> <p>Within a given BLAS there can be:</p> <ol> <li>Triangle meshes</li> <li>Procedural primitives initially described by an AABB</li> </ol> <p>A BLAS can only contain a single geometry type。</p> <p>Given a set of BLAS, the application defines a set of instances which points to a BLAS structure and includes information for specializing the instance, like matrix transform and a user defined InstanceID. Then this set of instances are used to generate TLAS into GPU memory.</p> <h1 id="acceleration-structure-updates">Acceleration structure updates</h1> <p>BLAS only allows vertex positions to be updated. TLAS is more flexible.</p> <h1 id="built-in-ray-triangle-intersection---triangle-mesh-geometry">Built-in ray-triangle intersection - triangle mesh geometry</h1> <p>Uses built-in intersection for triangles.</p> <h1 id="intersection-shaders---procedural-primitive-geometry">Intersection shaders - procedural primitive geometry</h1> <p>An alternative representation for geometry in a BLAS which uses procedural primitives.</p> <h1 id="any-hit-shaders">Any hit shaders</h1> <p>Can be defined to run whenever a ray intersects a geometry instance.</p> <p>Any hit shaders can:</p> <ol> <li>read intersection attributes</li> <li>modify ray payload</li> <li>indicate a hit should be ignored</li> <li>accept the hit and continue</li> <li>accept the hit and tell system to stop</li> </ol> <p>When accepts a hit, the <code class="language-plaintext highlighter-rouge">T</code> value becomes the new <code class="language-plaintext highlighter-rouge">TMax</code>. It can’t trace new ray.</p> <h1 id="closest-hit-shaders">Closest hit shaders</h1> <p>Can:</p> <ol> <li>read intersection attributes</li> <li>modify ray payload</li> <li>generate additional rays</li> </ol> <p>A typical use would be to evaluate the color of a surface and either contribute to the ray payload or store data to memory via UAV.</p> <p>If both any-hit and closest-hit shader types are defined for the geometry instance at the closest hit’s <code class="language-plaintext highlighter-rouge">T</code> value, the any-hit shader will always run before the closest hit shader.</p> <h1 id="miss-shaders">Miss shaders</h1> <p>For rays that do not intersect any geometry. Can:</p> <ol> <li>modify ray payload</li> <li>generate additional rays</li> </ol> <h1 id="hit-groups">Hit groups</h1> <p>A hit group is one or more shaders consisting of:</p> <ul> <li>0 or 1 intersection shader</li> <li>0 or 1 any hit shader</li> <li>0 or 1 closest hit shader</li> </ul> <p>Individual geometries in a given instance each refer to a hit group, or a hit group is bind to a geometry (<span style="color:yellow"><em>at least this is what I think</em></span>).</p> <h1 id="traceray-control-flow">TraceRay control flow</h1> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/traceRayControlFlow-480.webp 480w,/assets/img/traceRayControlFlow-800.webp 800w,/assets/img/traceRayControlFlow-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/traceRayControlFlow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="StudyNotes"/><category term="graphics"/><category term="DX12"/><summary type="html"><![CDATA[My studying notes of DXR]]></summary></entry></feed>