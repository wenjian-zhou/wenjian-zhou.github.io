<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://wenjian-zhou.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://wenjian-zhou.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-12T10:39:19+00:00</updated><id>https://wenjian-zhou.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Ease Your Graphics Development</title><link href="https://wenjian-zhou.github.io/blog/2025/ease-graphics-development/" rel="alternate" type="text/html" title="Ease Your Graphics Development"/><published>2025-07-15T17:00:00+00:00</published><updated>2025-07-15T17:00:00+00:00</updated><id>https://wenjian-zhou.github.io/blog/2025/ease-graphics-development</id><content type="html" xml:base="https://wenjian-zhou.github.io/blog/2025/ease-graphics-development/"><![CDATA[<p>This blog post serves as a collection of basic graphics algorithms, like ray-triangle intersections, ray-sphere intersections…etc. This idea came to my mind while I was reading <a href="https://github.com/microsoft/DirectX-Graphics-Samples">DirectX Raytracing Samples</a>, I am too lazy to remember those algorithms so I think I’ll just put a collection here so I don’t need to google every one of them every time.</p> <h2 id="ray-triangle-intersection">Ray-triangle intersection</h2> <p>C++ example from <a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/moller-trumbore-ray-triangle-intersection.html">here</a>, using Möller-Trumbore algorithm:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">rayTriangleIntersect</span><span class="p">(</span>
    <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">orig</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">dir</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">v0</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">v2</span><span class="p">,</span>
    <span class="kt">float</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
<span class="cp">#ifdef MOLLER_TRUMBORE
</span>    <span class="n">Vec3f</span> <span class="n">v0v1</span> <span class="o">=</span> <span class="n">v1</span> <span class="o">-</span> <span class="n">v0</span><span class="p">;</span>
    <span class="n">Vec3f</span> <span class="n">v0v2</span> <span class="o">=</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">v0</span><span class="p">;</span>
    <span class="n">Vec3f</span> <span class="n">pvec</span> <span class="o">=</span> <span class="n">dir</span><span class="p">.</span><span class="n">crossProduct</span><span class="p">(</span><span class="n">v0v2</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">det</span> <span class="o">=</span> <span class="n">v0v1</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">pvec</span><span class="p">);</span>
<span class="cp">#ifdef CULLING
</span>    <span class="c1">// If the determinant is negative, the triangle is back-facing.</span>
    <span class="c1">// If the determinant is close to 0, the ray misses the triangle.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">det</span> <span class="o">&lt;</span> <span class="n">kEpsilon</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="cp">#else
</span>    <span class="c1">// If det is close to 0, the ray and triangle are parallel.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">det</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">kEpsilon</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="cp">#endif
</span>    <span class="kt">float</span> <span class="n">invDet</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">det</span><span class="p">;</span>

    <span class="n">Vec3f</span> <span class="n">tvec</span> <span class="o">=</span> <span class="n">orig</span> <span class="o">-</span> <span class="n">v0</span><span class="p">;</span>
    <span class="n">u</span> <span class="o">=</span> <span class="n">tvec</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">pvec</span><span class="p">)</span> <span class="o">*</span> <span class="n">invDet</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">u</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">u</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

    <span class="n">Vec3f</span> <span class="n">qvec</span> <span class="o">=</span> <span class="n">tvec</span><span class="p">.</span><span class="n">crossProduct</span><span class="p">(</span><span class="n">v0v1</span><span class="p">);</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">dir</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">qvec</span><span class="p">)</span> <span class="o">*</span> <span class="n">invDet</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">u</span> <span class="o">+</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    
    <span class="n">t</span> <span class="o">=</span> <span class="n">v0v2</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">qvec</span><span class="p">)</span> <span class="o">*</span> <span class="n">invDet</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="cp">#else
</span>    <span class="p">...</span>
<span class="cp">#endif
</span><span class="p">}</span>
</code></pre></div></div> <h2 id="distance-functions">Distance functions</h2> <p><a href="https://iquilezles.org/articles/distfunctions/">Link</a></p> <h2 id="ray-sphere-intersection">Ray-sphere intersection</h2> <p>C++ example from <a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection.html">here</a>, where there’s an auxiliary function <code class="language-plaintext highlighter-rouge">solveQuadratic()</code></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">solveQuadratic</span><span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> 
					<span class="kt">float</span> <span class="o">&amp;</span><span class="n">x0</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">x1</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">float</span> <span class="n">discr</span> <span class="o">=</span> <span class="n">b</span> <span class="o">*</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">a</span> <span class="o">*</span> <span class="n">c</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">discr</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">discr</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">x0</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">b</span> <span class="o">/</span> <span class="n">a</span><span class="p">;</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="kt">float</span> <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span>
            <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">discr</span><span class="p">))</span> <span class="o">:</span>
            <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span> <span class="o">-</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">discr</span><span class="p">));</span>
        <span class="n">x0</span> <span class="o">=</span> <span class="n">q</span> <span class="o">/</span> <span class="n">a</span><span class="p">;</span>
        <span class="n">x1</span> <span class="o">=</span> <span class="n">c</span> <span class="o">/</span> <span class="n">q</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x0</span> <span class="o">&gt;</span> <span class="n">x1</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">x0</span><span class="p">,</span> <span class="n">x1</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">intersect</span><span class="p">(</span><span class="k">const</span> <span class="n">Ray</span> <span class="o">&amp;</span><span class="n">ray</span><span class="p">)</span> <span class="k">const</span>
<span class="p">{</span>
        <span class="kt">float</span> <span class="n">t0</span><span class="p">,</span> <span class="n">t1</span><span class="p">;</span> <span class="c1">// Solutions for t if the ray intersects the sphere</span>
<span class="c">#if 0
        // Geometric solution
        Vec3f L = center - ray.orig;
        float tca = L.dotProduct(ray.dir);
        // if (tca &lt; 0) return false;
        float d2 = L.dotProduct(L) - tca * tca;
        if (d2 &gt; radius * radius) return false;
        float thc = sqrt(radius * radius - d2);
        t0 = tca - thc;
        t1 = tca + thc;
#else</span>
        <span class="c1">// Analytic solution</span>
        <span class="n">Vec3f</span> <span class="n">L</span> <span class="o">=</span> <span class="n">ray</span><span class="p">.</span><span class="n">orig</span> <span class="o">-</span> <span class="n">center</span><span class="p">;</span>
        <span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="n">ray</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">ray</span><span class="p">.</span><span class="n">dir</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">ray</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">c</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="n">dotProduct</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="o">-</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">radius</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">solveQuadratic</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">t0</span><span class="p">,</span> <span class="n">t1</span><span class="p">))</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="cp">#endif
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">t0</span> <span class="o">&gt;</span> <span class="n">t1</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span> <span class="n">t1</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">t0</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">t0</span> <span class="o">=</span> <span class="n">t1</span><span class="p">;</span> <span class="c1">// If t0 is negative, let's use t1 instead.</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">t0</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// Both t0 and t1 are negative.</span>
        <span class="p">}</span>

        <span class="n">t</span> <span class="o">=</span> <span class="n">t0</span><span class="p">;</span>

        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="ray-box-intersection">Ray-box intersection</h2> <p>C++ example from <a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection.html">here</a>:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Ray</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Ray</span><span class="p">(</span><span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">orig</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vec3f</span> <span class="o">&amp;</span><span class="n">dir</span><span class="p">)</span> <span class="o">:</span> <span class="n">orig</span><span class="p">(</span><span class="n">orig</span><span class="p">),</span> <span class="n">dir</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">invdir</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">dir</span><span class="p">;</span>
        <span class="n">sign</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">invdir</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">sign</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">invdir</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">sign</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">invdir</span><span class="p">.</span><span class="n">z</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">Vec3</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">orig</span><span class="p">,</span> <span class="n">dir</span><span class="p">;</span>       <span class="c1">// Ray origin and direction</span>
    <span class="n">Vec3</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">invdir</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sign</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="p">};</span>
 
<span class="kt">bool</span> <span class="n">intersect</span><span class="p">(</span><span class="k">const</span> <span class="n">Ray</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">)</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">tmin</span><span class="p">,</span> <span class="n">tmax</span><span class="p">,</span> <span class="n">tymin</span><span class="p">,</span> <span class="n">tymax</span><span class="p">,</span> <span class="n">tzmin</span><span class="p">,</span> <span class="n">tzmax</span><span class="p">;</span>
    
    <span class="n">tmin</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="n">x</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
    <span class="n">tmax</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="n">x</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
    <span class="n">tymin</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="n">y</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
    <span class="n">tymax</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="n">y</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">((</span><span class="n">tmin</span> <span class="o">&gt;</span> <span class="n">tymax</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">tymin</span> <span class="o">&gt;</span> <span class="n">tmax</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">tymin</span> <span class="o">&gt;</span> <span class="n">tmin</span><span class="p">)</span>
        <span class="n">tmin</span> <span class="o">=</span> <span class="n">tymin</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">tymax</span> <span class="o">&lt;</span> <span class="n">tmax</span><span class="p">)</span>
        <span class="n">tmax</span> <span class="o">=</span> <span class="n">tymax</span><span class="p">;</span>
    
    <span class="n">tzmin</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="n">z</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">z</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">z</span><span class="p">;</span>
    <span class="n">tzmax</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="n">r</span><span class="p">.</span><span class="n">sign</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="n">z</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">orig</span><span class="p">.</span><span class="n">z</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">invdir</span><span class="p">.</span><span class="n">z</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">((</span><span class="n">tmin</span> <span class="o">&gt;</span> <span class="n">tzmax</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">tzmin</span> <span class="o">&gt;</span> <span class="n">tmax</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">tzmin</span> <span class="o">&gt;</span> <span class="n">tmin</span><span class="p">)</span>
        <span class="n">tmin</span> <span class="o">=</span> <span class="n">tzmin</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">tzmax</span> <span class="o">&lt;</span> <span class="n">tmax</span><span class="p">)</span>
        <span class="n">tmax</span> <span class="o">=</span> <span class="n">tzmax</span><span class="p">;</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="BlogPosts"/><category term="graphics"/><summary type="html"><![CDATA[Some useful links to ease your graphics development.]]></summary></entry><entry><title type="html">Learning DXR</title><link href="https://wenjian-zhou.github.io/blog/2025/learning-dxr/" rel="alternate" type="text/html" title="Learning DXR"/><published>2025-07-07T16:30:00+00:00</published><updated>2025-07-07T16:30:00+00:00</updated><id>https://wenjian-zhou.github.io/blog/2025/learning-dxr</id><content type="html" xml:base="https://wenjian-zhou.github.io/blog/2025/learning-dxr/"><![CDATA[<h2 id="initialting-raytracing">Initialting raytracing</h2> <ol> <li>Set pipline state containing raytracing shaders using <code class="language-plaintext highlighter-rouge">SetPipelineState()</code>.</li> <li>Invoke raytracing by <code class="language-plaintext highlighter-rouge">DispatchRays()</code> just like rasterization and compute are invoked by <code class="language-plaintext highlighter-rouge">Draw()</code> and <code class="language-plaintext highlighter-rouge">Dispatch()</code>.</li> <li>Tier 1.1: <ul> <li>adds support for GPU initiated <code class="language-plaintext highlighter-rouge">DispatchRays()</code> via <code class="language-plaintext highlighter-rouge">ExecuteIndirect()</code>.</li> <li>adds support for a variant of raytracing that can be invoked from any shader stage(<span style="color:red"><em>What???</em></span>).</li> </ul> </li> </ol> <h2 id="ray-generation-shaders">Ray generation shaders</h2> <p><code class="language-plaintext highlighter-rouge">DispatchRays()</code> invokes threads of ray generation shaders, and each of them knows it’s location in the “grid”, and can generate rays via <code class="language-plaintext highlighter-rouge">TraceRay()</code>.</p> <h2 id="rays">Rays</h2> <p>Which includes: origin, direction, and parametric interval <code class="language-plaintext highlighter-rouge">(TMin, TMax)</code>, positions along the ray is <code class="language-plaintext highlighter-rouge">origin + T * direction</code>.</p> <p>A ray is visible to the <em>caller</em> of <code class="language-plaintext highlighter-rouge">TraceRay()</code>, it comes with a user defined payload that is modifiable as the ray interacts with geometry in a scene(<span style="color:red"><em>What???</em></span>)</p> <p><code class="language-plaintext highlighter-rouge">TMin</code> never changes over the lifetime of a ray, the system reduces <code class="language-plaintext highlighter-rouge">TMax</code> to reflect the closest intersection.</p> <h2 id="raytracing-output">Raytracing output</h2> <p>Shaders output results such as color samples for an image, manually through UAVs.</p> <h2 id="ray-geometry-interaction-diagram">Ray-geometry interaction diagram</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/rayGeometryInteraction-480.webp 480w,/assets/img/rayGeometryInteraction-800.webp 800w,/assets/img/rayGeometryInteraction-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/rayGeometryInteraction.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="geometry-and-acceleration-structures">Geometry and acceleration structures</h2> <p>Geometry in a scene is described as a system using two levels of acceleration structures: <strong>Bottom-level acceleration structures(B-LAS)</strong> consist of a set of geometries that are building blocks for a scene, while <strong>Top-level acceleration structures(T-LAS)</strong> represents a set of instances of B-LAS structures.</p> <p>Within a given BLAS there can be:</p> <ol> <li>Triangle meshes</li> <li>Procedural primitives initially described by an AABB</li> </ol> <p>A BLAS can only contain a single geometry type。</p> <p>Given a set of BLAS, the application defines a set of instances which points to a BLAS structure and includes information for specializing the instance, like matrix transform and a user defined InstanceID. Then this set of instances are used to generate TLAS into GPU memory.</p> <h2 id="acceleration-structure-updates">Acceleration structure updates</h2> <p>BLAS only allows vertex positions to be updated. TLAS is more flexible.</p> <h2 id="built-in-ray-triangle-intersection---triangle-mesh-geometry">Built-in ray-triangle intersection - triangle mesh geometry</h2> <p>Uses built-in intersection for triangles.</p> <h2 id="intersection-shaders---procedural-primitive-geometry">Intersection shaders - procedural primitive geometry</h2> <p>An alternative representation for geometry in a BLAS which uses procedural primitives.</p> <h2 id="any-hit-shaders">Any hit shaders</h2> <p>Can be defined to run whenever a ray intersects a geometry instance.</p> <p>Any hit shaders can:</p> <ol> <li>read intersection attributes</li> <li>modify ray payload</li> <li>indicate a hit should be ignored</li> <li>accept the hit and continue</li> <li>accept the hit and tell system to stop</li> </ol> <p>When accepts a hit, the <code class="language-plaintext highlighter-rouge">T</code> value becomes the new <code class="language-plaintext highlighter-rouge">TMax</code>. It can’t trace new ray.</p> <h2 id="closest-hit-shaders">Closest hit shaders</h2> <p>Can:</p> <ol> <li>read intersection attributes</li> <li>modify ray payload</li> <li>generate additional rays</li> </ol> <p>A typical use would be to evaluate the color of a surface and either contribute to the ray payload or store data to memory via UAV.</p> <p>If both any-hit and closest-hit shader types are defined for the geometry instance at the closest hit’s <code class="language-plaintext highlighter-rouge">T</code> value, the any-hit shader will always run before the closest hit shader.</p> <h2 id="miss-shaders">Miss shaders</h2> <p>For rays that do not intersect any geometry. Can:</p> <ol> <li>modify ray payload</li> <li>generate additional rays</li> </ol> <h2 id="hit-groups">Hit groups</h2> <p>A hit group is one or more shaders consisting of:</p> <ul> <li>0 or 1 intersection shader</li> <li>0 or 1 any hit shader</li> <li>0 or 1 closest hit shader</li> </ul> <p>Individual geometries in a given instance each refer to a hit group.</p> <h2 id="traceray-control-flow">TraceRay control flow</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/traceRayControlFlow-480.webp 480w,/assets/img/traceRayControlFlow-800.webp 800w,/assets/img/traceRayControlFlow-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/traceRayControlFlow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="instance-masking">Instance masking</h2> <p><span style="color:red"><em>will finish this part when I understand it</em></span></p> <h2 id="callable-shaders">Callable shaders</h2> <p>Defined through <em>shader table</em>, implementations are expected to schedule callable shaders for execution separately from the calling shader.</p> <h2 id="resouce-binding">Resouce binding</h2> <h3 id="local-root-signatures-vs-global-root-signatures">Local root signatures vs global root signatures</h3> <ul> <li><em>local root signature</em>, enables each shader to have unique arguments.</li> <li><em>global root signature</em>, whose arguments are shared across all raytracing shaders and compute PSOs on CommandLists, set via <code class="language-plaintext highlighter-rouge">SetComputeRootSignature()</code></li> </ul> <p>If any local root signature makes a sampler definition such as <code class="language-plaintext highlighter-rouge">s0</code>, all local root signatures that define <code class="language-plaintext highlighter-rouge">s0</code> must have the same definition.</p> <h2 id="shader-identifier">Shader identifier</h2> <p>A shader identifier identified one of the raytracing shaders: ray gen, hit group, miss, callable. It can be thought of as <em>a pointer to a shader</em>.</p> <p>For separate raytracing pipelines or collections of code, the same shader may not return the same identifier depending on the implementation.</p> <h2 id="shader-record">Shader record</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shader record = {shader identifier, local root arguments for the shader}
</code></pre></div></div> <p>A shader record refers to a region of memory owned by the application in the above layout.</p> <h2 id="shader-tables">Shader tables</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shader table = {shader record A}, {shader record B}, ...
</code></pre></div></div> <p>A shader table is a set of shader records.</p> <hr/> <h2 id="example-in-microsoft-directx-raytracing-sample">Example in Microsoft DirectX Raytracing Sample</h2> <p>Before Rendering:</p> <ol> <li>OnInit <ul> <li>Create device resources</li> <li>Scene initialization: setup primitives, materials, cameras, lights…</li> <li>Create resources that depend on the device <ul> <li>Any auxilary device resources</li> <li>Create raytracing interfaces: device, commandlist</li> <li>Create root signatures for shaders: global root signature, local root signature (<span style="color:orange">how to design local root signature? make separate LHS or a shared LHS? Looks like it can be used with “bindless”</span>)</li> <li>Create raytracing PSO: DXIL library, hit group types, shader config, local/global root signature, pipeline config</li> <li>Create descriptor heap</li> <li>Build geometry</li> <li>Build TLAS and BLAS</li> <li>Create constant buffer</li> <li>Create AABB primitive attribute buffers(<span style="color:orange">not neccessary</span>)</li> <li>Create shader table(ray gen, miss, hit group…)</li> <li>Create output resources(for storing raytracing result)</li> </ul> </li> </ul> </li> <li>When rendering <ul> <li>Do any update you want: animate camera, animate geometries…</li> <li>Do raytracing(dispatch)</li> </ul> </li> <li>After rendering <ul> <li>Clean up neccessary things</li> </ul> </li> </ol>]]></content><author><name></name></author><category term="StudyNotes"/><category term="graphics"/><category term="DX12"/><summary type="html"><![CDATA[My studying notes of DXR.]]></summary></entry></feed>